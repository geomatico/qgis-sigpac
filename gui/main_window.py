# -*- coding: utf-8 -*-
"""
/***************************************************************************
 sigpac_downloaderDialog
                                 A QGIS plugin
 Plugin to download SIGPAC parcels
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-01-20
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Geomatico
        email                : info@geomatico.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import urllib
from urllib.error import URLError
from urllib.request import urlopen, Request
import xml.etree.ElementTree as ET

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from .sigpac_licence_accept_browser import SigPacLicenceAcceptBrowser

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
pluginPath = os.path.split(os.path.dirname(__file__))[0]
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    pluginPath, 'ui', 'main_window.ui'))

from .listamuni import *

listProvincias = LISTPROV
listMunicipios = LISTMUNI

class main_window(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(main_window, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.browser = None
        self.comboBox_province.clear()
        self.comboBox_municipality.clear()
        self.comboBox_province.addItems(listProvincias)
        self.comboBox_province.currentIndexChanged.connect(self.filter_municipality)
        self.comboBox_province.currentIndexChanged.connect(self.download_and_parse_province_atom)

        self.btnOpenBrowser.clicked.connect(self.openBrowser)

        self.pushButton.clicked.connect(self.downloadFile)

        self.gpkg_links = {}

    def openBrowser(self):
        self.browser = SigPacLicenceAcceptBrowser()
        conditionsAccepted = self.browser.exec_()
        if conditionsAccepted == 1:
            self.btnOpenBrowser.setStyleSheet("background-color:#00ff00;");


    def getSelectedProvinceCod(self):
        if self.comboBox_municipality.currentText() == '':
            return None
        else:
            return self.comboBox_municipality.currentText()[0:2]

    def getSelectedMunicipalityCod(self):
        if self.comboBox_municipality.currentText() == '':
            return None
        else:
            return self.comboBox_municipality.currentText()[0:5]

    def getDownloadUrl(self):

        codprov = self.getSelectedMunicipalityCod()

        if not codprov:
            return None

        if codprov in self.gpkg_links.keys():
            return self.gpkg_links[codprov]

    def downloadFile(self):

        url = self.getDownloadUrl()
        path = self.mQgsFileWidget.filePath()

        if url == None:
            self.displayWarning('Debes seleccionar provincia y municipio')
            return

        if path == '':
            self.displayWarning('Debes seleccionar una carpeta de destino')
            return

        if self.browser and self.browser.cookie:
            opener = urllib.request.build_opener()
            opener.addheaders = [('Cookie', self.browser.cookie)]
            urllib.request.install_opener(opener)
            file_path = os.path.join(path, os.path.basename(url))

            try:
                urllib.request.urlretrieve(url, file_path)
                self.displayWarning(f'Descarga correcta {os.path.basename(url)}')
            except URLError as e:
                self.displayWarning('Error en la descarga', True)

        else:
            self.displayWarning('Debes aceptar las condiciones')


    def filter_municipality(self, index):
        """Message for fields without information"""

        filtroprovincia = self.comboBox_province.currentText()
        self.comboBox_municipality.clear()

        self.comboBox_municipality.addItems([muni for muni in listMunicipios if muni[0:2] == filtroprovincia[0:2]])
        self.displayWarning('')
        self.comboBox_municipality.currentIndexChanged.connect(self.displayWarning)


    def displayWarning(self, text, error=False):
        # warning: conditions not accepted
        if type(text) == str:
            self.label.setText(text)
        else:
            self.label.setText('')

        #color
        if error == True:
            self.label.setStyleSheet("color: red;");
        else:
            self.label.setStyleSheet("color: black;");
        self.label.setText(text)


    def download_and_parse_province_atom(self):
        codprov = self.getSelectedProvinceCod()

        if codprov:
            atom_url = f'https://www.fega.gob.es/atom/{codprov}/es.fega.sigpac.{codprov}.xml'
            request = Request(atom_url)
            request.add_header('Cookie', self.browser.cookie)
            file = urlopen(request)
            data = file.read()
            file.close()

            ns = {'atom': 'http://www.w3.org/2005/Atom',
                  'inspire_dls': 'http://inspire.ec.europa.eu/schemas/inspire_dls/1.0'}
            atomroot = ET.fromstring(data)

            for x in atomroot.findall('atom:entry', ns):
                cod = x.find('inspire_dls:spatial_dataset_identifier_code', ns).text.replace('es.fega.sigpac.', '')
                links = x.findall('atom:link', ns)
                for link in links:
                    if link.attrib['type'] == 'application/geopackage+vnd.sqlite3':
                        self.gpkg_links[cod] = link.attrib['href']

